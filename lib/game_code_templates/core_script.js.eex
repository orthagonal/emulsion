// current user input state:
window.userInput = 'idle';

// Function to update the display of the current user input
function updateUserInputDisplay() {
    document.getElementById('userInputDisplay').innerText = `User Input: ${window.userInput}`;
  }

window.onload = async function () {
    const playgraph = window.Playgraph.getPlaygraph('main');
    const data = playgraph;
    window.playgraph = data;

    window.VideoPlayer = new VideoPlayer();
    window.VideoPlayer.setupEventHandlers();

    window.VideoPlayer.currentNodeIndex = data.nodes.length - 1;

    const firstNode = data.nodes[data.nodes.length - 1];
    const firstVideo = `/main/${firstNode.edges[0].id}`; // Assuming the main sub-folder contains the video files

    const videoA = document.getElementById("videoA");
    videoA.src = firstVideo;
    
    const playOnInteraction = function () {
        if (videoA.readyState > 3) {
            videoA.play();
            // Remove this listener since the video has started
            document.removeEventListener('click', playOnInteraction);
        }
    };

    // Add listeners for various user interactions
    document.addEventListener('click', playOnInteraction);

    document.addEventListener('keydown', (event) => {
        window.userInput = 'next';
        // Update the display when the page loads
    });
    updateUserInputDisplay();
};

function stopEventPropagation(event) {
    event.stopPropagation();
}

class VideoPlayer {
    constructor() {
        this.videoA = document.getElementById('videoA');
        this.videoB = document.getElementById('videoB');
        this.blocked = false; // Initially, the player is not blocked
        // Prevent both video elements from capturing or acting on the keydown events
        this.videoA.addEventListener('keydown', stopEventPropagation);
         this.videoB.addEventListener('keydown', stopEventPropagation);
         this.videoA.style.pointerEvents = "none";
         this.videoB.style.pointerEvents = "none";
    }

    setupEventHandlers() {
        this.videoA.onended = () => this.switchVideos(this.videoA, this.videoB);
        this.videoB.onended = () => this.switchVideos(this.videoB, this.videoA);
    }

    
    switchVideos(currentVideo, nextVideo) {
        if (this.blocked) return;

        // Determine the next node to transition to
        const currentNode = window.playgraph.nodes[this.currentNodeIndex];
        const currentEdgeIndex = currentNode.edges.findIndex(edge => currentVideo.src.includes(edge.id));
        let nextEdgeIndex = (currentEdgeIndex + 1) % currentNode.edges.length;

        // Select the next edge based on the global userInput variable
        const nextEdges = currentNode.edges.filter(edge => edge.tags.includes(window.userInput));
        if (nextEdges.length > 0) {
            nextEdgeIndex = currentNode.edges.indexOf(nextEdges[0]);
        }

        const nextVideoPath = `/main/${currentNode.edges[nextEdgeIndex].id}`;

        // Update the current node index if we transitioned to a different node
        const nextNodeId = currentNode.edges[nextEdgeIndex].to;
        const nextNodeIndex = window.playgraph.nodes.findIndex(node => node.id === nextNodeId);
        if (nextNodeIndex !== -1) {
            this.currentNodeIndex = nextNodeIndex;
        }

        // Play the next video
        nextVideo.src = nextVideoPath;
        this.updateVideoNameDisplay(nextVideoPath);

        // Play the next video
        nextVideo.oncanplaythrough = () => {
            // Hide current video
            currentVideo.style.display = "none";
            
            // Display next video and play it
            nextVideo.style.display = "block";
            nextVideo.play();

            // If the previous video was in fullscreen, make sure the next video also enters fullscreen
            if (document.fullscreenElement) {
                nextVideo.requestFullscreen().catch(err => {
                    console.error(`Error attempting to enable fullscreen mode: ${err.message} (${err.name})`);
                });
            }

            // Remove the oncanplaythrough event handler
            nextVideo.oncanplaythrough = null;
        };

        // Reset userInput to 'idle' after selecting an edge
        window.userInput = 'idle';
        updateUserInputDisplay();
    }

    updateVideoNameDisplay(videoPath) {
    // Extract video name from the video path.
    // For example, if videoPath is "/main/someVideo.mp4", the name would be "someVideo.mp4"
    const videoName = videoPath.split('/').pop();
    document.getElementById('currentVideoName').innerText = videoName;
    }
}