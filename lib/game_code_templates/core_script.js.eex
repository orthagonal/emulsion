window.onload = function () {
    // Fetch playgraph from local file using Tauri
    tauri.promisified({
        cmd: "getPlaygraph", // Assuming a corresponding Rust command is defined
    })
        .then((data) => {
            window.playgraph = data;

            window.VideoPlayer = new VideoPlayer();
            window.VideoPlayer.setupEventHandlers();

            window.VideoPlayer.currentNodeIndex = data.nodes.length - 1;

            const firstNode = data.nodes[data.nodes.length - 1];
            const firstVideo = `./main/${firstNode.edges[0].id}`; // Assuming the main sub-folder contains the video files

            const videoA = document.getElementById("videoA");
            videoA.src = firstVideo;

            const interval = setInterval(() => {
                if (videoA.readyState > 3) {
                    videoA.play();
                    clearInterval(interval);
                }
            }, 100);
        })
        .catch(function () {
            console.log("Failed to load JSON file");
        });
};

        class VideoPlayer {
            constructor() {
                this.videoA = document.getElementById('videoA');
                this.videoB = document.getElementById('videoB');
                this.blocked = false; // Initially, the player is not blocked
            }

            setupEventHandlers() {
                this.videoA.onended = () => this.switchVideos(this.videoA, this.videoB);
                this.videoB.onended = () => this.switchVideos(this.videoB, this.videoA); 
            }

            switchVideos(currentVideo, nextVideo) {
                if (this.blocked) return;

                // Determine the next node to transition to
                const currentNode = window.playgraph.nodes[this.currentNodeIndex];
                const currentEdgeIndex = currentNode.edges.findIndex(edge => currentVideo.src.includes(edge.id));
                const nextEdgeIndex = (currentEdgeIndex + 1) % currentNode.edges.length;
                const nextVideoPath = `./main/${currentNode.edges[nextEdgeIndex].id}`;

                // Update the current node index if we transitioned to a different node
                const nextNodeId = currentNode.edges[nextEdgeIndex].to;
                const nextNodeIndex = window.playgraph.nodes.findIndex(node => node.id === nextNodeId);
                if (nextNodeIndex !== -1) {
                    this.currentNodeIndex = nextNodeIndex;
                }

                // Play the next video
                nextVideo.src = nextVideoPath;
                nextVideo.oncanplaythrough = () => {
                    // Hide current video and play next video when it's ready to play
                    currentVideo.style.display = "none";
                    nextVideo.style.display = "block";
                    nextVideo.play();

                    // Remove the oncanplaythrough event handler
                    nextVideo.oncanplaythrough = null;
                };
            }
        }