// global variables
const screenWidth = 1920.0;
const screenHeight = 1080.0;
const cursorWidth = 128.0;
const cursorHeight = 128.0;

// current user input state:
window.userInput = 'idle';
window.cursorState = 'idle';

// WebGPU Variables
let adapter, device, canvas, context;
let mousePositionBuffer, constantsBuffer;
let videoTexture, cursorVideoTexture;
let bindGroup;
let mainVideoPipeline, cursorPipeline;  // Pipeline for rendering the video
let videoBindGroup;  // BindGroup for rendering the video
let cursorBindGroup;  // BindGroup for rendering the cursor
let currentCursor = null;
let linearSampler = null;
let fragmentShaderModules = {};



let defaultCursor, alphaCursor;

const vertexShaderCode = `
struct VertexOutput {
    @builtin(position) Position : vec4<f32>,
    @location(0) fragUV : vec2<f32>,
}

@vertex
fn main(@builtin(vertex_index) vertexIndex: u32) -> VertexOutput {
    var pos = array<vec2<f32>, 4>(
        vec2(-1.0, 1.0),   // top-left
        vec2(-1.0, -1.0),  // bottom-left
        vec2(1.0, 1.0),    // top-right
        vec2(1.0, -1.0)    // bottom-right
    );

    const uv = array(
        vec2(0.0, 0.0),  // top-left (y-coordinate flipped)
        vec2(0.0, 1.0),  // bottom-left (y-coordinate flipped)
        vec2(1.0, 0.0),  // top-right (y-coordinate flipped)
        vec2(1.0, 1.0)   // bottom-right (y-coordinate flipped)
    );

    var output : VertexOutput;
    output.Position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);
    output.fragUV = uv[vertexIndex];
    return output;
}
`;

const mainFragmentShaderCode = `
@group(0) @binding(0) var mySampler: sampler;
@group(0) @binding(1) var myTexture: texture_2d<f32>;

@fragment
fn main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {
    return textureSampleBaseClampToEdge(myTexture, mySampler, fragUV);
}

`;

const cursorFragmentShaderCode = `
struct MouseUniform {
    mousePosition: vec2<f32>
};

struct Constants {
    screenWidth: f32,
    screenHeight: f32,
    cursorWidth: f32,
    cursorHeight: f32
};

@group(0) @binding(0) var mySampler: sampler;
@group(0) @binding(1) var smallTexture: texture_2d<f32>;
@group(0) @binding(2) var<uniform> mousePosition: MouseUniform;
@group(0) @binding(3) var<uniform> constants: Constants;

@fragment
fn main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {
    var halfCursorWidth = constants.cursorWidth / constants.screenWidth / 2.0;
    var halfCursorHeight = constants.cursorHeight / constants.screenHeight / 2.0;
    var leftBoundary = mousePosition.mousePosition.x - halfCursorWidth;
    var rightBoundary = mousePosition.mousePosition.x + halfCursorWidth;
    var yOffset = 1.0 * halfCursorHeight;
    var bottomBoundary = mousePosition.mousePosition.y - halfCursorHeight - yOffset;
    var topBoundary = mousePosition.mousePosition.y + halfCursorHeight - yOffset; 

    var isWithinCursor = fragUV.x > leftBoundary && fragUV.x < rightBoundary && 
                         fragUV.y > bottomBoundary && fragUV.y < topBoundary;

    if (isWithinCursor) {
        var adjustedUV = vec2<f32>(
            (fragUV.x - leftBoundary) / (2.0 * halfCursorWidth), 
            1.0 - (fragUV.y - bottomBoundary) / (2.0 * halfCursorHeight)
        );
        return textureSampleBaseClampToEdge(smallTexture, mySampler, adjustedUV);
    }
    return vec4<f32>(0.0, 0.0, 0.0, 0.0); // Return transparent color outside cursor region
}

`;

const alphaFragmentShaderCode = `
struct MouseUniform {
    mousePosition: vec2<f32>
};

struct Constants {
    screenWidth: f32,
    screenHeight: f32,
    cursorWidth: f32,
    cursorHeight: f32
};

@group(0) @binding(0) var mySampler: sampler;
@group(0) @binding(1) var smallTexture: texture_2d<f32>;
@group(0) @binding(2) var<uniform> mousePosition: MouseUniform;
@group(0) @binding(3) var<uniform> constants: Constants;

@fragment
fn main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {
    var halfCursorWidth = constants.cursorWidth / constants.screenWidth / 2.0;
    var halfCursorHeight = constants.cursorHeight / constants.screenHeight / 2.0;
    var leftBoundary = mousePosition.mousePosition.x - halfCursorWidth;
    var rightBoundary = mousePosition.mousePosition.x + halfCursorWidth;
    var yOffset = 1.0 * halfCursorHeight;
    var bottomBoundary = mousePosition.mousePosition.y - halfCursorHeight - yOffset;
    var topBoundary = mousePosition.mousePosition.y + halfCursorHeight - yOffset; 

    var isWithinCursor = fragUV.x > leftBoundary && fragUV.x < rightBoundary && 
                         fragUV.y > bottomBoundary && fragUV.y < topBoundary;

    if (isWithinCursor) {
        var adjustedUV = vec2<f32>(
            (fragUV.x - leftBoundary) / (2.0 * halfCursorWidth), 
            1.0 - (fragUV.y - bottomBoundary) / (2.0 * halfCursorHeight)
        );
        return textureSampleBaseClampToEdge(smallTexture, mySampler, adjustedUV);
    }
    return vec4<f32>(0.0, 0.0, 0.0, 0.0); // Return transparent color outside cursor region
}

`;


// src/trailer/src.js
class CursorPlugin {
    constructor(videoTexture, fragmentShader, eventHandlers) {
        this.videoTexture = videoTexture;
        this.fragmentShader = fragmentShader;
        this.eventHandlers = eventHandlers;
        this.playgraph = null;  // Placeholder, you can define the playgraph mechanism here       
        this.currentVideo = null;
    }

    static setCursor(cursor) {
        if (currentCursor) {
            currentCursor.detachEventHandlers(canvas);
        }

        currentCursor = cursor;
        cursor.attachEventHandlers(canvas);
        // TODO: Use cursor's videoTexture and fragmentShader to update the rendering process
    }

    setPlaygraph(playgraph) {
        this.playgraph = playgraph;
    }

    attachEventHandlers(element) {
        for (let event in this.eventHandlers) {
            element.addEventListener(event, this.eventHandlers[event]);
        }
    }

    detachEventHandlers(element) {
        for (let event in this.eventHandlers) {
            element.removeEventListener(event, this.eventHandlers[event]);
        }
    }
}


function setCursor(cursorType) {
    if (cursorType === 'default') {
        CursorPlugin.setCursor(defaultCursor);
        cursorVideoTexture = device.createTexture({
            size: { width: cursorWidth, height: cursorHeight, depthOrArrayLayers: 1 },
            format: 'rgba8unorm',
            usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED | GPUTextureUsage.TEXTURE_BINDING
        });
        createPipeline('default');
    } else if (cursorType === 'alpha') {
        CursorPlugin.setCursor(alphaCursor);
        cursorVideoTexture = device.createTexture({
            size: { width: cursorWidth, height: cursorHeight, depthOrArrayLayers: 1 },
            format: 'rgba8unorm',
            usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED | GPUTextureUsage.TEXTURE_BINDING
        });
        createPipeline('cursor2');
    } else {
        console.error(`Unknown cursor type: ${cursorType}`);
    }
}

let currentCursorType = 'default'; // Initial state

document.addEventListener('keydown', function (event) {
    if (event.key === 'c') {
        if (currentCursorType === 'default') {
            setCursor('alpha');
            currentCursorType = 'alpha';
        } else {
            setCursor('default');
            currentCursorType = 'default';
        }
    }
});

// Default cursor event handlers
const defaultCursorEventHandlers = {
    mousemove: event => {
        // Normalize the mouse position
        let x = event.clientX / canvas.width;
        let y = event.clientY / canvas.height;

        // Update the buffer
        const mousePositionArray = new Float32Array([x, y]);
        device.queue.writeBuffer(
            mousePositionBuffer,
            0,
            mousePositionArray.buffer
        );
    },
    click: event => {
        window.cursorState = 'next';
    },
    keydown: event => {
        // if they hit the 'n' button set to next
        if (event.key === 'n') {
            window.userInput = 'next';
        }
    }
};


// Function to update the display of the current user input
function updateUserInputDisplay() {
    document.getElementById('userInputDisplay').innerText = `User Input: ${window.userInput}`;
}

async function initWebGPU() {
    adapter = await navigator.gpu.requestAdapter();
    device = await adapter.requestDevice();

    canvas = document.getElementById("webgpuCanvas");
    let dpr = window.devicePixelRatio;
    canvas.width = window.innerWidth * dpr;
    canvas.height = window.innerHeight * dpr;
    canvas.style.width = `${window.innerWidth}px`;
    canvas.style.height = `${window.innerHeight}px`;

    context = canvas.getContext("webgpu", { alpha: true });

    mousePositionBuffer = device.createBuffer({
        size: 8,  // 2 float32 values: x and y
        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
    });

    constantsBuffer = device.createBuffer({
        size: 4 * 4,  // 4 constants of 4 bytes (float) each
        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
    });

    device.queue.writeBuffer(
        constantsBuffer,
        0,
        new Float32Array([screenWidth, screenHeight, cursorWidth, cursorHeight]).buffer
    );

    videoTexture = device.createTexture({
        size: { width: screenWidth, height: screenHeight, depthOrArrayLayers: 1 },
        format: 'rgba8unorm',
        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED | GPUTextureUsage.TEXTURE_BINDING
    });

    cursorVideoTexture = device.createTexture({
        size: { width: cursorWidth, height: cursorHeight, depthOrArrayLayers: 1 },
        format: 'rgba8unorm',
        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED | GPUTextureUsage.TEXTURE_BINDING
    });

    linearSampler = device.createSampler({
        magFilter: 'linear',
        minFilter: 'linear',
    });

    fragmentShaderModules.main = device.createShaderModule({
        code: mainFragmentShaderCode
    });

    fragmentShaderModules.defaultVertex = device.createShaderModule({
        code: vertexShaderCode
    });
    fragmentShaderModules.default = device.createShaderModule({
        code: cursorFragmentShaderCode
    });
    fragmentShaderModules.cursor1 = device.createShaderModule({
        code: cursorFragmentShaderCode
    });
    fragmentShaderModules.cursor2 = device.createShaderModule({
        code: alphaFragmentShaderCode
    });

    createPipeline('default');
}

let mainBGL;
let cursorBGL;

function createPipeline(cursorType) {
    mainBGL = device.createBindGroupLayout({
        entries: [
            { binding: 0, visibility: GPUShaderStage.FRAGMENT, sampler: { type: 'filtering' } },
            { binding: 1, visibility: GPUShaderStage.FRAGMENT, texture: { sampleType: 'float' } },
            { binding: 2, visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX, buffer: { type: 'uniform' } }
        ]
    });
    mainVideoPipeline = device.createRenderPipeline({
        layout: device.createPipelineLayout({
            bindGroupLayouts: [mainBGL],            
            // bindGroupLayouts: [device.createBindGroupLayout({
            //     entries: [
            //         {
            //             binding: 0,
            //             visibility: GPUShaderStage.FRAGMENT,
            //             sampler: {
            //                 type: 'filtering'
            //             }
            //         },
            //         {
            //             binding: 1,
            //             visibility: GPUShaderStage.FRAGMENT,
            //             texture: {
            //                 sampleType: 'float'
            //             }
            //         },
            //         {
            //             binding: 2,
            //             visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX,
            //             buffer: { type: 'uniform' }
            //         }
            //     ]
            // })],
        }),
        vertex: {
            module: fragmentShaderModules.defaultVertex,
            entryPoint: 'main'
        },
        fragment: {
            module: fragmentShaderModules.main,
            entryPoint: 'main',
            targets: [{
                format: 'rgba8unorm',
                blend: {
                    alpha: {
                        operation: 'add',
                        srcFactor: 'src-alpha',
                        dstFactor: 'one-minus-src-alpha'
                    },
                    color: {
                        operation: 'add',
                        srcFactor: 'src-alpha',
                        dstFactor: 'one-minus-src-alpha'
                    }
                }
            }]
        },
        primitive: {
            topology: 'triangle-strip',
            stripIndexFormat: 'uint32'
        },
    });

    cursorBGL = device.createBindGroupLayout({
        entries: [
            { binding: 0, visibility: GPUShaderStage.FRAGMENT, sampler: { type: 'filtering' } },
            { binding: 1, visibility: GPUShaderStage.FRAGMENT, texture: { sampleType: 'float' } },
            { binding: 2, visibility: GPUShaderStage.FRAGMENT, buffer: { type: 'uniform' } },
            { binding: 3, visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX, buffer: { type: 'uniform' } }
        ]
    });
    cursorPipeline = device.createRenderPipeline({
        layout: device.createPipelineLayout({
            bindGroupLayouts: [ cursorBGL ],
        }),
        vertex: {
            module: fragmentShaderModules.defaultVertex,
            entryPoint: 'main'
        },
        fragment: {
            module: fragmentShaderModules[cursorType],
            entryPoint: 'main',
            targets: [{
                format: 'rgba8unorm',
                blend: {
                    alpha: {
                        operation: 'add',
                        srcFactor: 'src-alpha',
                        dstFactor: 'one-minus-src-alpha'
                    },
                    color: {
                        operation: 'add',
                        srcFactor: 'src-alpha',
                        dstFactor: 'one-minus-src-alpha'
                    }
                }
            }]
        },
        primitive: {
            topology: 'triangle-strip',
            stripIndexFormat: 'uint32'
        },
    });

    createBindGroups();

}

function createBindGroups() {
    // Create bind group for rendering the video
    videoBindGroup = device.createBindGroup({
        layout: mainBGL,
        entries: [
            { binding: 0, resource: linearSampler },
            { binding: 1, resource: videoTexture.createView() },
            { binding: 2, resource: { buffer: constantsBuffer } }
        ]
    });

    cursorBindGroup = device.createBindGroup({
        layout: cursorBGL,
        entries: [
            { binding: 0, resource: linearSampler },
            { binding: 1, resource: cursorVideoTexture.createView() },
            { binding: 2, resource: { buffer: mousePositionBuffer } },
            { binding: 3, resource: { buffer: constantsBuffer } }
        ]
    });
}

function updateTextureFromVideo(videoElement, targetTexture, dimensions) {
    const { width, height } = dimensions;
    const offscreenCanvas = new OffscreenCanvas(width, height);
    const ctx = offscreenCanvas.getContext('2d');
    ctx.drawImage(videoElement, 0, 0, width, height);

    const imageData = ctx.getImageData(0, 0, width, height);
    device.queue.writeTexture(
        { texture: targetTexture },
        imageData.data,
        {                                  // Data layout
            offset: 0,
            bytesPerRow: 4 * width,       // Updated to use width, assuming each pixel is 4 bytes (RGBA)
            rowsPerImage: height
        },
        { width: width, height: height, depthOrArrayLayers: 1 }  // Size
    );
}

async function renderFrame() {
    let mouseX = 0;
    let mouseY = 0;

    const swapChainFormat = 'rgba8unorm';
    context.configure({
        device: device,
        format: swapChainFormat
    });

    const currentTexture = context.getCurrentTexture();
    const renderPassDescriptor = {
        colorAttachments: [{
            view: currentTexture.createView(),
            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },
            loadOp: 'clear',
            storeOp: 'store',
            loadValue: 'clear',
        }],
    };
    const commandEncoder = device.createCommandEncoder();
    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

    passEncoder.setPipeline(mainVideoPipeline);
    passEncoder.setBindGroup(0, videoBindGroup);
    passEncoder.draw(4, 1, 0, 0);

    passEncoder.setPipeline(cursorPipeline);
    passEncoder.setBindGroup(0, cursorBindGroup);
    passEncoder.draw(4, 1, 0, 0);

    passEncoder.end();
    device.queue.submit([commandEncoder.finish()]);
}

function renderLoop() {
    // Determine the video currently playing
    // Main video player logic
    let currentMainVideo;
    if (window.mainVideoPlayer.videoA.currentTime > 0 && !window.mainVideoPlayer.videoA.paused && !window.mainVideoPlayer.videoA.ended) {
        currentMainVideo = window.mainVideoPlayer.videoA;
    } else if (window.mainVideoPlayer.videoB.currentTime > 0 && !window.mainVideoPlayer.videoB.paused && !window.mainVideoPlayer.videoB.ended) {
        currentMainVideo = window.mainVideoPlayer.videoB;
    }

    // Cursor video player logic
    let currentCursorVideo;
    if (window.cursorVideoPlayer.videoA.currentTime > 0 && !window.cursorVideoPlayer.videoA.paused && !window.cursorVideoPlayer.videoA.ended) {
        currentCursorVideo = window.cursorVideoPlayer.videoA;
    } else if (window.cursorVideoPlayer.videoB.currentTime > 0 && !window.cursorVideoPlayer.videoB.paused && !window.cursorVideoPlayer.videoB.ended) {
        currentCursorVideo = window.cursorVideoPlayer.videoB;
    }

    // Update textures
    if (currentMainVideo) {
        updateTextureFromVideo(currentMainVideo, videoTexture, { width: screenWidth, height: screenHeight });
    }
    if (currentCursorVideo) {
        updateTextureFromVideo(currentCursorVideo, cursorVideoTexture, { width: cursorWidth, height: cursorHeight });
    }
    // Render to the canvas using WebGPU
    renderFrame();
    // Call this function continuously to keep updating
    requestAnimationFrame(renderLoop);
}

window.onload = async function () {
    await initWebGPU();

    // Create the default cursor using the cursor plugin class
    const cursorPlaygraph = window.Playgraph.getPlaygraph('one').cursor;
    defaultCursor = new CursorPlugin(cursorVideoTexture, cursorFragmentShaderCode, defaultCursorEventHandlers);
    defaultCursor.setPlaygraph(cursorPlaygraph);

    const alphaCursorPlaygraph = window.Playgraph.getPlaygraph('one').cursor;
    alphaCursor = new CursorPlugin(cursorVideoTexture, alphaFragmentShaderCode, defaultCursorEventHandlers);
    alphaCursor.setPlaygraph(alphaCursorPlaygraph);

    // Set this default cursor as the current cursor
    CursorPlugin.setCursor(alphaCursor);
    // CursorPlugin.setCursor(defaultCursor);
    window.cursorVideoPlayer = new VideoPlayer(cursorPlaygraph, defaultCursorNextVideoStrategy);
    window.cursorVideoPlayer.currentNodeIndex = 0;

    const playgraph = window.Playgraph.getPlaygraph('one').main;
    window.mainVideoPlayer = new VideoPlayer(playgraph, defaultNextVideoStrategy);
    window.mainVideoPlayer.currentNodeIndex = playgraph.nodes.length - 1;
    let bothVideosLoaded = 0;
    // Add listeners for various user interactions
    document.addEventListener('click', function playOnInteraction() {
        renderLoop();
        if (window.mainVideoPlayer.videoA.readyState > 3) {
            window.mainVideoPlayer.videoA.play();
            // Preload next video
            const nextVideoPath = window.mainVideoPlayer.getNextVideoStrategy(window.mainVideoPlayer.videoA);
            window.mainVideoPlayer.videoB.src = nextVideoPath;
            window.mainVideoPlayer.videoB.load();
            // Remove this listener since the video has started
            if (++bothVideosLoaded === 2) {
                document.removeEventListener('click', playOnInteraction);
            }
        }
        if (window.cursorVideoPlayer.videoA.readyState > 3) {
            window.cursorVideoPlayer.videoA.play();
            // Preload next video
            const nextVideoPath = window.cursorVideoPlayer.getNextVideoStrategy(window.cursorVideoPlayer.videoA);
            window.cursorVideoPlayer.videoB.src = nextVideoPath;
            window.cursorVideoPlayer.videoB.load();
            if (++bothVideosLoaded === 2) {
                document.removeEventListener('click', playOnInteraction);
            }
        }
    });
    renderFrame();
};

function defaultCursorNextVideoStrategy(currentVideo) {
    const currentNode = this.playgraph.nodes[this.currentNodeIndex];
    const currentEdgeIndex = currentNode.edges.findIndex(edge => currentVideo.src.includes(edge.id));
    let nextEdgeIndex = (currentEdgeIndex + 1) % currentNode.edges.length;

    // Select the next edge based on the global cursorState variable
    const nextEdges = currentNode.edges.filter(edge => edge.tags.includes(window.cursorState));
    if (nextEdges.length > 0) {
        nextEdgeIndex = currentNode.edges.indexOf(nextEdges[0]);
    }

    const nextVideoPath = `/main/${currentNode.edges[nextEdgeIndex].id}`;

    // Update the current node index if we transitioned to a different node
    const nextNodeId = currentNode.edges[nextEdgeIndex].to;
    const nextNodeIndex = this.playgraph.nodes.findIndex(node => node.id === nextNodeId);
    if (nextNodeIndex !== -1) {
        this.currentNodeIndex = nextNodeIndex;
    }
    return nextVideoPath;
}

function defaultNextVideoStrategy(currentVideo) {
    const currentNode = this.playgraph.nodes[this.currentNodeIndex];
    const currentEdgeIndex = currentNode.edges.findIndex(edge => currentVideo.src.includes(edge.id));
    let nextEdgeIndex = (currentEdgeIndex + 1) % currentNode.edges.length;

    // Select the next edge based on the global userInput variable
    const nextEdges = currentNode.edges.filter(edge => edge.tags.includes(window.userInput));
    if (nextEdges.length > 0) {
        nextEdgeIndex = currentNode.edges.indexOf(nextEdges[0]);
    }

    const nextVideoPath = `/main/${currentNode.edges[nextEdgeIndex].id}`;

    // Update the current node index if we transitioned to a different node
    const nextNodeId = currentNode.edges[nextEdgeIndex].to;
    const nextNodeIndex = this.playgraph.nodes.findIndex(node => node.id === nextNodeId);
    if (nextNodeIndex !== -1) {
        this.currentNodeIndex = nextNodeIndex;
    }

    return nextVideoPath;
}

class VideoPlayer {
    constructor(playgraph, getNextVideoStrategy) {
        this.playgraph = playgraph;
        this.getNextVideoStrategy = getNextVideoStrategy.bind(this);
        this.blocked = false; // Initially, the player is not blocked
        this.videoA = this.createVideoElement();
        this.videoB = this.createVideoElement();
        this.videoA.onended = () => this.switchVideos(this.videoA, this.videoB);
        this.videoB.onended = () => this.switchVideos(this.videoB, this.videoA);
        const firstNode = playgraph.nodes[playgraph.nodes.length - 1];
        const firstVideo = `/main/${firstNode.edges[0].id}`; // Assuming the main sub-folder contains the video files
        this.videoA.src = firstVideo;
    }

    createVideoElement() {
        const videoElem = document.createElement('video');
        videoElem.style.pointerEvents = "none";
        // document.body.appendChild(videoElem); // This is needed to make sure the video elements are in the DOM. If not needed, you can remove this line.
        return videoElem;
    }

    switchVideos(currentVideo, nextVideo) {
        if (this.blocked) return;

        const nextVideoPath = this.getNextVideoStrategy(currentVideo);

        this.updateVideoNameDisplay(nextVideoPath);

        // Play the next video
        nextVideo.src = nextVideoPath;
        nextVideo.oncanplaythrough = () => {
            nextVideo.play();

            // If the previous video was in fullscreen, make sure the next video also enters fullscreen
            if (document.fullscreenElement) {
                nextVideo.requestFullscreen().catch(err => {
                    console.error(`Error attempting to enable fullscreen mode: ${err.message} (${err.name})`);
                });
            }

            // Determine the subsequent video and preload it
            const subsequentVideo = (nextVideo === this.videoA) ? this.videoB : this.videoA;
            subsequentVideo.src = currentVideo.src; // Set the subsequent video's src to the current video's src
            subsequentVideo.load();

            // Remove the oncanplaythrough event handler
            nextVideo.oncanplaythrough = null;
        };

        // Reset userInput to 'idle' after selecting an edge
        // TODO THIS NEEDS TO BE made abstract
        window.userInput = 'idle';
        window.cursorState = 'idle';
        updateUserInputDisplay();
    }

    updateVideoNameDisplay(videoPath) {
        // Extract video name from the video path.
        // For example, if videoPath is "/main/someVideo.mp4", the name would be "someVideo.mp4"
        const videoName = videoPath.split('/').pop();
        document.getElementById('currentVideoName').innerText = videoName;
    }
}